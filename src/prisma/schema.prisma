// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  orders    Order[]
}

model Table {
  id            String        @id @default(uuid())
  numberOfSeats Int
  tableNumber   Int           @unique @default(autoincrement())
  orders        Order[]
  reservations  Reservation[]
  state         TableState
}

model Customer {
  id             String          @id @default(uuid())
  type           CustomerType
  bookedCustomer BookedCustomer?
  newCustomer    NewCustomer?
  orders         Order[]
}

model BookedCustomer {
  phoneNumber  String
  firstName    String
  lastName     String
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String        @id
  reservations Reservation[]
}

model NewCustomer {
  ordinamNumber Int
  date          DateTime
  customer      Customer @relation(fields: [customerId], references: [id])
  customerId    String   @id

  @@unique([ordinamNumber, date])
}

model Order {
  id            String         @id @default(uuid())
  arrivalTime   DateTime       @default(now())
  leavingTime   DateTime?
  state         OrderState
  paymentMethod PaymentMethod?
  orderItems    OrderItem[]
  totalCost     Int            @default(0)
  totalDiscount Float          @default(0)
  table         Table          @relation(fields: [tableId], references: [id])
  tableId       String
  customer      Customer?      @relation(fields: [customerId], references: [id])
  customerId    String?
  employee      User?          @relation(fields: [employeeId], references: [id])
  employeeId    String?
}

model OrderItem {
  price             Int
  discount          Float
  totalQuantity     Int
  preparingQuantity Int
  servedQuantity    Int
  order             Order    @relation(fields: [orderId], references: [id])
  orderId           String
  foodItem          FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId        String

  @@id([orderId, foodItemId])
}

model FoodItem {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Int
  discount    Float
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      Image[]
  orderItems  OrderItem[]
}

model Category {
  id       String     @id @default(uuid())
  name     String     @unique
  foodItem FoodItem[]
}

model Image {
  id         String   @id @default(uuid())
  url        String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
}

model Reservation {
  id              String           @id @default(uuid())
  createdDate     DateTime         @default(now())
  updatedDate     DateTime         @default(now())
  time            DateTime
  numberOfPeople  Int
  state           ReservationState
  assignedTable   Table?           @relation(fields: [assignedTableId], references: [id])
  assignedTableId String?
  customer        BookedCustomer   @relation(fields: [customerId], references: [customerId])
  customerId      String
}

// enum
enum UserRole {
  CLERK
  MANAGER
  ADMIN
}

enum CustomerType {
  NEW
  BOOKED
}

enum OrderState {
  INPROGRESS
  DONE
}

enum TableState {
  FREE
  LOCKED
  INPROGRESS
}

enum PaymentMethod {
  ONLINE
  OFFLINE
}

enum ReservationState {
  INIT
  ASSIGNED
  READY
  LOCKED
  CANCEL
  DONE
}
